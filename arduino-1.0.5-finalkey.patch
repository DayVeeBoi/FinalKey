diff -rupN arduino-1.0.5/hardware/arduino/cores/arduino/HID.cpp arduino-dst/hardware/arduino/cores/arduino/HID.cpp
--- arduino-1.0.5/hardware/arduino/cores/arduino/HID.cpp	2013-05-17 20:22:16.000000000 +0200
+++ arduino-dst/hardware/arduino/cores/arduino/HID.cpp	2014-03-16 02:24:41.061050000 +0100
@@ -47,7 +47,7 @@ extern const u8 _hidReportDescriptor[] P
 const u8 _hidReportDescriptor[] = {
 	
 	//	Mouse
-    0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)	// 54
+   /* 0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)	// 54
     0x09, 0x02,                    // USAGE (Mouse)
     0xa1, 0x01,                    // COLLECTION (Application)
     0x09, 0x01,                    //   USAGE (Pointer)
@@ -74,7 +74,7 @@ const u8 _hidReportDescriptor[] = {
     0x95, 0x03,                    //     REPORT_COUNT (3)
     0x81, 0x06,                    //     INPUT (Data,Var,Rel)
     0xc0,                          //   END_COLLECTION
-    0xc0,                          // END_COLLECTION
+    0xc0,                          // END_COLLECTION*/
 
 	//	Keyboard
     0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)	// 47
@@ -105,27 +105,6 @@ const u8 _hidReportDescriptor[] = {
     0x29, 0x65,                    //   USAGE_MAXIMUM (Keyboard Application)
     0x81, 0x00,                    //   INPUT (Data,Ary,Abs)
     0xc0,                          // END_COLLECTION
-
-#if RAWHID_ENABLED
-	//	RAW HID
-	0x06, LSB(RAWHID_USAGE_PAGE), MSB(RAWHID_USAGE_PAGE),	// 30
-	0x0A, LSB(RAWHID_USAGE), MSB(RAWHID_USAGE),
-
-	0xA1, 0x01,				// Collection 0x01
-    0x85, 0x03,             // REPORT_ID (3)
-	0x75, 0x08,				// report size = 8 bits
-	0x15, 0x00,				// logical minimum = 0
-	0x26, 0xFF, 0x00,		// logical maximum = 255
-
-	0x95, 64,				// report count TX
-	0x09, 0x01,				// usage
-	0x81, 0x02,				// Input (array)
-
-	0x95, 64,				// report count RX
-	0x09, 0x02,				// usage
-	0x91, 0x02,				// Output (array)
-	0xC0					// end collection
-#endif
 };
 
 extern const HIDDescriptor _hidInterface PROGMEM;
@@ -261,12 +240,40 @@ bool Mouse_::isPressed(uint8_t b)
 //================================================================================
 //	Keyboard
 
+
+uint8_t* _asciimap;
+
+#define NOMOD 0x00
+
+//Calculated as (1<<(KEY_LEFT_SHIFT-128))
+#define SHIFT 2
+//Calculated as (1<<(KEY_RIGHT_ALT-128))
+#define ALT 64
+
+#include "keymap-us.h"
+#include "keymap-dk.h"
+
 Keyboard_::Keyboard_(void) 
 {
 }
 
-void Keyboard_::begin(void) 
+void Keyboard_::begin(uint8_t lang) 
 {
+  switch(lang)
+  {
+    case KEYBOARD_LANG_DK_PC:
+      _asciimap = (uint8_t*)(&DKPC_asciimap);      
+      break;
+    case KEYBOARD_LANG_US_PC:
+      _asciimap = (uint8_t*)(&USPC_asciimap);
+      break;
+    case KEYBOARD_LANG_DK_MAC:
+      _asciimap = (uint8_t*)(&DKMAC_asciimap);
+      break;
+    default:
+      Serial.print("Unknown:"); Serial.print(lang);
+      break;
+  }
 }
 
 void Keyboard_::end(void) 
@@ -275,145 +282,9 @@ void Keyboard_::end(void)
 
 void Keyboard_::sendReport(KeyReport* keys)
 {
-	HID_SendReport(2,keys,sizeof(KeyReport));
+	HID_SendReport(2,keys,sizeof(KeyReport));	
 }
 
-extern
-const uint8_t _asciimap[128] PROGMEM;
-
-#define SHIFT 0x80
-const uint8_t _asciimap[128] =
-{
-	0x00,             // NUL
-	0x00,             // SOH
-	0x00,             // STX
-	0x00,             // ETX
-	0x00,             // EOT
-	0x00,             // ENQ
-	0x00,             // ACK  
-	0x00,             // BEL
-	0x2a,			// BS	Backspace
-	0x2b,			// TAB	Tab
-	0x28,			// LF	Enter
-	0x00,             // VT 
-	0x00,             // FF 
-	0x00,             // CR 
-	0x00,             // SO 
-	0x00,             // SI 
-	0x00,             // DEL
-	0x00,             // DC1
-	0x00,             // DC2
-	0x00,             // DC3
-	0x00,             // DC4
-	0x00,             // NAK
-	0x00,             // SYN
-	0x00,             // ETB
-	0x00,             // CAN
-	0x00,             // EM 
-	0x00,             // SUB
-	0x00,             // ESC
-	0x00,             // FS 
-	0x00,             // GS 
-	0x00,             // RS 
-	0x00,             // US 
-
-	0x2c,		   //  ' '
-	0x1e|SHIFT,	   // !
-	0x34|SHIFT,	   // "
-	0x20|SHIFT,    // #
-	0x21|SHIFT,    // $
-	0x22|SHIFT,    // %
-	0x24|SHIFT,    // &
-	0x34,          // '
-	0x26|SHIFT,    // (
-	0x27|SHIFT,    // )
-	0x25|SHIFT,    // *
-	0x2e|SHIFT,    // +
-	0x36,          // ,
-	0x2d,          // -
-	0x37,          // .
-	0x38,          // /
-	0x27,          // 0
-	0x1e,          // 1
-	0x1f,          // 2
-	0x20,          // 3
-	0x21,          // 4
-	0x22,          // 5
-	0x23,          // 6
-	0x24,          // 7
-	0x25,          // 8
-	0x26,          // 9
-	0x33|SHIFT,      // :
-	0x33,          // ;
-	0x36|SHIFT,      // <
-	0x2e,          // =
-	0x37|SHIFT,      // >
-	0x38|SHIFT,      // ?
-	0x1f|SHIFT,      // @
-	0x04|SHIFT,      // A
-	0x05|SHIFT,      // B
-	0x06|SHIFT,      // C
-	0x07|SHIFT,      // D
-	0x08|SHIFT,      // E
-	0x09|SHIFT,      // F
-	0x0a|SHIFT,      // G
-	0x0b|SHIFT,      // H
-	0x0c|SHIFT,      // I
-	0x0d|SHIFT,      // J
-	0x0e|SHIFT,      // K
-	0x0f|SHIFT,      // L
-	0x10|SHIFT,      // M
-	0x11|SHIFT,      // N
-	0x12|SHIFT,      // O
-	0x13|SHIFT,      // P
-	0x14|SHIFT,      // Q
-	0x15|SHIFT,      // R
-	0x16|SHIFT,      // S
-	0x17|SHIFT,      // T
-	0x18|SHIFT,      // U
-	0x19|SHIFT,      // V
-	0x1a|SHIFT,      // W
-	0x1b|SHIFT,      // X
-	0x1c|SHIFT,      // Y
-	0x1d|SHIFT,      // Z
-	0x2f,          // [
-	0x31,          // bslash
-	0x30,          // ]
-	0x23|SHIFT,    // ^
-	0x2d|SHIFT,    // _
-	0x35,          // `
-	0x04,          // a
-	0x05,          // b
-	0x06,          // c
-	0x07,          // d
-	0x08,          // e
-	0x09,          // f
-	0x0a,          // g
-	0x0b,          // h
-	0x0c,          // i
-	0x0d,          // j
-	0x0e,          // k
-	0x0f,          // l
-	0x10,          // m
-	0x11,          // n
-	0x12,          // o
-	0x13,          // p
-	0x14,          // q
-	0x15,          // r
-	0x16,          // s
-	0x17,          // t
-	0x18,          // u
-	0x19,          // v
-	0x1a,          // w
-	0x1b,          // x
-	0x1c,          // y
-	0x1d,          // z
-	0x2f|SHIFT,    // 
-	0x31|SHIFT,    // |
-	0x30|SHIFT,    // }
-	0x35|SHIFT,    // ~
-	0				// DEL
-};
 
 uint8_t USBPutChar(uint8_t c);
 
@@ -423,41 +294,18 @@ uint8_t USBPutChar(uint8_t c);
 // call release(), releaseAll(), or otherwise clear the report and resend.
 size_t Keyboard_::press(uint8_t k) 
 {
-	uint8_t i;
-	if (k >= 136) {			// it's a non-printing key (not a modifier)
-		k = k - 136;
-	} else if (k >= 128) {	// it's a modifier key
-		_keyReport.modifiers |= (1<<(k-128));
-		k = 0;
-	} else {				// it's a printing key
-		k = pgm_read_byte(_asciimap + k);
-		if (!k) {
-			setWriteError();
-			return 0;
-		}
-		if (k & 0x80) {						// it's a capital letter or other character reached with shift
-			_keyReport.modifiers |= 0x02;	// the left shift modifier
-			k &= 0x7F;
-		}
-	}
+	_keyReport.keys[1] = 0;	
+	_keyReport.keys[2] = 0;
+	_keyReport.keys[3] = 0;	
+	_keyReport.keys[4] = 0;
+	_keyReport.keys[5] = 0;	
+	_keyReport.modifiers = 0;
+
 	
-	// Add k to the key report only if it's not already present
-	// and if there is an empty slot.
-	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k && 
-		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
-		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {
-		
-		for (i=0; i<6; i++) {
-			if (_keyReport.keys[i] == 0x00) {
-				_keyReport.keys[i] = k;
-				break;
-			}
-		}
-		if (i == 6) {
-			setWriteError();
-			return 0;
-		}	
-	}
+	//DST's attempt	
+	_keyReport.keys[0] = pgm_read_byte( _asciimap + (k*2) );
+	_keyReport.modifiers = pgm_read_byte( _asciimap + (k*2)+1 );
+
 	sendReport(&_keyReport);
 	return 1;
 }
@@ -467,32 +315,7 @@ size_t Keyboard_::press(uint8_t k)
 // it shouldn't be repeated any more.
 size_t Keyboard_::release(uint8_t k) 
 {
-	uint8_t i;
-	if (k >= 136) {			// it's a non-printing key (not a modifier)
-		k = k - 136;
-	} else if (k >= 128) {	// it's a modifier key
-		_keyReport.modifiers &= ~(1<<(k-128));
-		k = 0;
-	} else {				// it's a printing key
-		k = pgm_read_byte(_asciimap + k);
-		if (!k) {
-			return 0;
-		}
-		if (k & 0x80) {							// it's a capital letter or other character reached with shift
-			_keyReport.modifiers &= ~(0x02);	// the left shift modifier
-			k &= 0x7F;
-		}
-	}
-	
-	// Test the key report to see if k is present.  Clear it if it exists.
-	// Check all positions in case the key is present more than once (which it shouldn't be)
-	for (i=0; i<6; i++) {
-		if (0 != k && _keyReport.keys[i] == k) {
-			_keyReport.keys[i] = 0x00;
-		}
-	}
-
-	sendReport(&_keyReport);
+	releaseAll();
 	return 1;
 }
 
@@ -517,4 +340,4 @@ size_t Keyboard_::write(uint8_t c)
 
 #endif
 
-#endif /* if defined(USBCON) */
\ No newline at end of file
+#endif /* if defined(USBCON) */
diff -rupN arduino-1.0.5/hardware/arduino/cores/arduino/USBAPI.h arduino-dst/hardware/arduino/cores/arduino/USBAPI.h
--- arduino-1.0.5/hardware/arduino/cores/arduino/USBAPI.h	2013-05-17 20:22:16.000000000 +0200
+++ arduino-dst/hardware/arduino/cores/arduino/USBAPI.h	2014-05-10 16:34:47.941344055 +0200
@@ -111,6 +111,11 @@ extern Mouse_ Mouse;
 #define KEY_F11				0xCC
 #define KEY_F12				0xCD
 
+#define KEYBOARD_LANG_DK_PC	0
+#define KEYBOARD_LANG_US_PC	1
+#define KEYBOARD_LANG_DK_MAC	2
+#define KEYBOARD_LANG_US_MAC	1 //Hack  finish those too
+
 //	Low level key report: up to 6 keys and shift, ctrl etc at once
 typedef struct
 {
@@ -126,7 +131,7 @@ private:
 	void sendReport(KeyReport* keys);
 public:
 	Keyboard_(void);
-	void begin(void);
+	void begin(uint8_t lang);
 	void end(void);
 	virtual size_t write(uint8_t k);
 	virtual size_t press(uint8_t k);
@@ -135,6 +140,7 @@ public:
 };
 extern Keyboard_ Keyboard;
 
+
 //================================================================================
 //================================================================================
 //	Low level API
diff -rupN arduino-1.0.5/hardware/arduino/cores/arduino/keymap-dk.h arduino-dst/hardware/arduino/cores/arduino/keymap-dk.h
--- arduino-1.0.5/hardware/arduino/cores/arduino/keymap-dk.h	1970-01-01 01:00:00.000000000 +0100
+++ arduino-dst/hardware/arduino/cores/arduino/keymap-dk.h	2014-03-16 02:23:10.752588000 +0100
@@ -0,0 +1,278 @@
+uint8_t DKPC_asciimap[256] PROGMEM =
+{
+	0x00,NOMOD,             // NUL
+	0x00,NOMOD,             // SOH
+	0x00,NOMOD,             // STX
+	0x00,NOMOD,             // ETX
+	0x00,NOMOD,             // EOT
+	0x00,NOMOD,             // ENQ
+	0x00,NOMOD,             // ACK  
+	0x00,NOMOD,             // BEL
+	0x2a,NOMOD,			// BS	Backspace
+	0x2b,NOMOD,			// TAB	Tab (2b)
+	0x28,NOMOD,			// LF	Enter (28)
+	0x00,NOMOD,             // VT 
+	0x00,NOMOD,             // FF 
+	0x00,NOMOD,             // CR 
+	0x00,NOMOD,             // SO 
+	0x00,NOMOD,             // SI 
+	0x00,NOMOD,             // DEL
+	0x00,NOMOD,             // DC1
+	0x00,NOMOD,             // DC2
+	0x00,NOMOD,             // DC3
+	0x00,NOMOD,             // DC4
+	0x00,NOMOD,             // NAK
+	0x00,NOMOD,             // SYN
+	0x00,NOMOD,             // ETB
+	0x00,NOMOD,             // CAN
+	0x00,NOMOD,             // EM 
+	0x00,NOMOD,             // SUB
+	0x00,NOMOD,             // ESC
+	0x00,NOMOD,             // FS 
+	0x00,NOMOD,             // GS 
+	0x00,NOMOD,             // RS 
+	0x00,NOMOD,             // US 
+
+	0x2c,NOMOD,		   //  ' '
+	0x1e,SHIFT,	   // !
+	0x1f,SHIFT,	   // " 
+	0x20,SHIFT,    // #
+	0x21,ALT,    // $
+	0x22,SHIFT,    // % 
+	0x23,SHIFT,    // &
+	0x32,NOMOD,          // '
+	0x25,SHIFT,    // (
+	0x26,SHIFT,    // )
+	0x32,SHIFT,    // *
+	0x2d,NOMOD,    // +
+	0x36,NOMOD,          // ,
+	0x38,NOMOD,          // -
+	0x37,NOMOD,          // .
+	0x24,SHIFT,          // /
+	0x27,NOMOD,          // 0
+	0x1e,NOMOD,          // 1
+	0x1f,NOMOD,          // 2
+	0x20,NOMOD,          // 3
+	0x21,NOMOD,          // 4
+	0x22,NOMOD,          // 5
+	0x23,NOMOD,          // 6
+	0x24,NOMOD,          // 7
+	0x25,NOMOD,          // 8
+	0x26,NOMOD,          // 9
+	0x37,SHIFT,      // :
+	0x36,SHIFT,          // ;
+	0x64,NOMOD,      // <
+	0x27,SHIFT,          // =
+	0x64,SHIFT,      // >
+	0x2d,SHIFT,      // ?
+	0x1f,ALT,      // @
+	0x04,SHIFT,      // A
+	0x05,SHIFT,      // B
+	0x06,SHIFT,      // C
+	0x07,SHIFT,      // D
+	0x08,SHIFT,      // E
+	0x09,SHIFT,      // F
+	0x0a,SHIFT,      // G
+	0x0b,SHIFT,      // H
+	0x0c,SHIFT,      // I
+	0x0d,SHIFT,      // J
+	0x0e,SHIFT,      // K
+	0x0f,SHIFT,      // L
+	0x10,SHIFT,      // M
+	0x11,SHIFT,      // N
+	0x12,SHIFT,      // O
+	0x13,SHIFT,      // P
+	0x14,SHIFT,      // Q
+	0x15,SHIFT,      // R
+	0x16,SHIFT,      // S
+	0x17,SHIFT,      // T
+	0x18,SHIFT,      // U
+	0x19,SHIFT,      // V
+	0x1a,SHIFT,      // W
+	0x1b,SHIFT,      // X
+	0x1c,SHIFT,      // Y
+	0x1d,SHIFT,      // Z
+	0x25,ALT,          // [
+	0x64,ALT,          // bslash // 
+	0x26,ALT,          // ]
+	0x00,NOMOD,    // ^ - unsupported, since some systems requires it to be pressed twice, while others only one
+	0x38,SHIFT,    // _
+	0x35,NOMOD,          // `
+	0x04,NOMOD,          // a
+	0x05,NOMOD,          // b
+	0x06,NOMOD,          // c
+	0x07,NOMOD,          // d
+	0x08,NOMOD,          // e
+	0x09,NOMOD,          // f
+	0x0a,NOMOD,          // g
+	0x0b,NOMOD,          // h
+	0x0c,NOMOD,          // i
+	0x0d,NOMOD,          // j
+	0x0e,NOMOD,         // k
+	0x0f,NOMOD,          // l
+	0x10,NOMOD,          // m
+	0x11,NOMOD,          // n
+	0x12,NOMOD,          // o
+	0x13,NOMOD,          // p
+	0x14,NOMOD,          // q
+	0x15,NOMOD,          // r
+	0x16,NOMOD,          // s
+	0x17,NOMOD,          // t
+	0x18,NOMOD,          // u
+	0x19,NOMOD,          // v
+	0x1a,NOMOD,          // w
+	0x1b,NOMOD,          // x
+	0x1c,NOMOD,          // y
+	0x1d,NOMOD,          // z
+	0x24,ALT,    // {
+	0x2e,ALT,    // |
+	0x27,ALT,    // }
+	0x00,NOMOD,    // ~ - unsupported, since some systems requires it to be pressed twice, while others only one
+	0,NOMOD				// DEL
+};
+
+/*
+ * 
+ * 
+ * 
+ * 
+ * The Danish apple keyboard is disgusting.
+ * 
+ * 
+ * 
+ *
+ */
+
+uint8_t DKMAC_asciimap[256] PROGMEM =
+{
+	0x00,NOMOD,             // NUL
+	0x00,NOMOD,             // SOH
+	0x00,NOMOD,             // STX
+	0x00,NOMOD,             // ETX
+	0x00,NOMOD,             // EOT
+	0x00,NOMOD,             // ENQ
+	0x00,NOMOD,             // ACK  
+	0x00,NOMOD,             // BEL
+	0x2a,NOMOD,			// BS	Backspace
+	0x2b,NOMOD,			// TAB	Tab (2b)
+	0x28,NOMOD,			// LF	Enter (28)
+	0x00,NOMOD,             // VT 
+	0x00,NOMOD,             // FF 
+	0x00,NOMOD,             // CR 
+	0x00,NOMOD,             // SO 
+	0x00,NOMOD,             // SI 
+	0x00,NOMOD,             // DEL
+	0x00,NOMOD,             // DC1
+	0x00,NOMOD,             // DC2
+	0x00,NOMOD,             // DC3
+	0x00,NOMOD,             // DC4
+	0x00,NOMOD,             // NAK
+	0x00,NOMOD,             // SYN
+	0x00,NOMOD,             // ETB
+	0x00,NOMOD,             // CAN
+	0x00,NOMOD,             // EM 
+	0x00,NOMOD,             // SUB
+	0x00,NOMOD,             // ESC
+	0x00,NOMOD,             // FS 
+	0x00,NOMOD,             // GS 
+	0x00,NOMOD,             // RS 
+	0x00,NOMOD,             // US 
+
+	0x2c,NOMOD,		   //  ' '
+	0x1e,SHIFT,	   // !
+	0x1f,SHIFT,	   // " 
+	0x20,SHIFT,    // #
+	0x64,NOMOD,    // $
+	0x22,SHIFT,    // % 
+	0x23,SHIFT,    // &
+	0x32,NOMOD,          // '
+	0x25,SHIFT,    // (
+	0x26,SHIFT,    // )
+	0x32,SHIFT,    // *
+	0x2d,NOMOD,    // +
+	0x36,NOMOD,          // ,
+	0x38,NOMOD,          // -
+	0x37,NOMOD,          // .
+	0x24,SHIFT,          // /
+	0x27,NOMOD,          // 0
+	0x1e,NOMOD,          // 1
+	0x1f,NOMOD,          // 2
+	0x20,NOMOD,          // 3
+	0x21,NOMOD,          // 4
+	0x22,NOMOD,          // 5
+	0x23,NOMOD,          // 6
+	0x24,NOMOD,          // 7
+	0x25,NOMOD,          // 8
+	0x26,NOMOD,          // 9
+	0x37,SHIFT,      // :
+	0x36,SHIFT,          // ;
+	0x35,NOMOD,      // <
+	0x27,SHIFT,          // =
+	0x35,SHIFT,      // >
+	0x2d,SHIFT,      // ?
+	0x32,ALT,      // @
+	0x04,SHIFT,      // A
+	0x05,SHIFT,      // B
+	0x06,SHIFT,      // C
+	0x07,SHIFT,      // D
+	0x08,SHIFT,      // E
+	0x09,SHIFT,      // F
+	0x0a,SHIFT,      // G
+	0x0b,SHIFT,      // H
+	0x0c,SHIFT,      // I
+	0x0d,SHIFT,      // J
+	0x0e,SHIFT,      // K
+	0x0f,SHIFT,      // L
+	0x10,SHIFT,      // M
+	0x11,SHIFT,      // N
+	0x12,SHIFT,      // O
+	0x13,SHIFT,      // P
+	0x14,SHIFT,      // Q
+	0x15,SHIFT,      // R
+	0x16,SHIFT,      // S
+	0x17,SHIFT,      // T
+	0x18,SHIFT,      // U
+	0x19,SHIFT,      // V
+	0x1a,SHIFT,      // W
+	0x1b,SHIFT,      // X
+	0x1c,SHIFT,      // Y
+	0x1d,SHIFT,      // Z
+	0x25,ALT,          // [
+	0x24,SHIFT|ALT,          // bslash // 
+	0x26,ALT,          // ]
+	0x00,NOMOD,    // ^ - unsupported, since some systems requires it to be pressed twice, while others only one
+	0x38,SHIFT,    // _
+	0x35,NOMOD,          // `
+	0x04,NOMOD,          // a
+	0x05,NOMOD,          // b
+	0x06,NOMOD,          // c
+	0x07,NOMOD,          // d
+	0x08,NOMOD,          // e
+	0x09,NOMOD,          // f
+	0x0a,NOMOD,          // g
+	0x0b,NOMOD,          // h
+	0x0c,NOMOD,          // i
+	0x0d,NOMOD,          // j
+	0x0e,NOMOD,         // k
+	0x0f,NOMOD,          // l
+	0x10,NOMOD,          // m
+	0x11,NOMOD,          // n
+	0x12,NOMOD,          // o
+	0x13,NOMOD,          // p
+	0x14,NOMOD,          // q
+	0x15,NOMOD,          // r
+	0x16,NOMOD,          // s
+	0x17,NOMOD,          // t
+	0x18,NOMOD,          // u
+	0x19,NOMOD,          // v
+	0x1a,NOMOD,          // w
+	0x1b,NOMOD,          // x
+	0x1c,NOMOD,          // y
+	0x1d,NOMOD,          // z
+	0x25,ALT|SHIFT,    // {
+	0x0c,ALT,    // |
+	0x26,ALT|SHIFT,    // }
+	0x00,NOMOD,    // ~ - unsupported, since some systems requires it to be pressed twice, while others only one
+	0,NOMOD				// DEL
+};
+
diff -rupN arduino-1.0.5/hardware/arduino/cores/arduino/keymap-us.h arduino-dst/hardware/arduino/cores/arduino/keymap-us.h
--- arduino-1.0.5/hardware/arduino/cores/arduino/keymap-us.h	1970-01-01 01:00:00.000000000 +0100
+++ arduino-dst/hardware/arduino/cores/arduino/keymap-us.h	2014-03-16 02:23:10.752588000 +0100
@@ -0,0 +1,133 @@
+uint8_t USPC_asciimap[256] PROGMEM =
+{
+	0x00,NOMOD,             // NUL
+	0x00,NOMOD,             // SOH
+	0x00,NOMOD,             // STX
+	0x00,NOMOD,             // ETX
+	0x00,NOMOD,             // EOT
+	0x00,NOMOD,             // ENQ
+	0x00,NOMOD,             // ACK  
+	0x00,NOMOD,             // BEL
+	0x2a,NOMOD,			// BS	Backspace
+	0x2b,NOMOD,			// TAB	Tab (2b)
+	0x28,NOMOD,			// LF	Enter (28)
+	0x00,NOMOD,             // VT 
+	0x00,NOMOD,             // FF 
+	0x00,NOMOD,             // CR 
+	0x00,NOMOD,             // SO 
+	0x00,NOMOD,             // SI 
+	0x00,NOMOD,             // DEL
+	0x00,NOMOD,             // DC1
+	0x00,NOMOD,             // DC2
+	0x00,NOMOD,             // DC3
+	0x00,NOMOD,             // DC4
+	0x00,NOMOD,             // NAK
+	0x00,NOMOD,             // SYN
+	0x00,NOMOD,             // ETB
+	0x00,NOMOD,             // CAN
+	0x00,NOMOD,             // EM 
+	0x00,NOMOD,             // SUB
+	0x00,NOMOD,             // ESC
+	0x00,NOMOD,             // FS 
+	0x00,NOMOD,             // GS 
+	0x00,NOMOD,             // RS 
+	0x00,NOMOD,             // US 
+
+	0x2c,NOMOD,		   //  ' '
+	0x1e,SHIFT,	   // !
+	0x34,SHIFT,	   // " /* orig: 0x34|SHIFT */
+	0x20,SHIFT,    // #
+	0x21,SHIFT,    // $
+	0x22,SHIFT,    // %
+	0x24,SHIFT,    // &
+	0x34,NOMOD,          // '
+	0x26,SHIFT,    // (
+	0x27,SHIFT,    // )
+	0x25,SHIFT,    // *
+	0x2e,SHIFT,    // +
+	0x36,NOMOD,          // ,
+	0x2d,NOMOD,          // -
+	0x37,NOMOD,          // .
+	0x38,NOMOD,          // /
+	0x27,NOMOD,          // 0
+	0x1e,NOMOD,          // 1
+	0x1f,NOMOD,          // 2
+	0x20,NOMOD,          // 3
+	0x21,NOMOD,          // 4
+	0x22,NOMOD,          // 5
+	0x23,NOMOD,          // 6
+	0x24,NOMOD,          // 7
+	0x25,NOMOD,          // 8
+	0x26,NOMOD,          // 9
+	0x33,SHIFT,      // :
+	0x33,NOMOD,          // ;
+	0x36,SHIFT,      // <
+	0x2e,NOMOD,          // =
+	0x37,SHIFT,      // >
+	0x38,SHIFT,      // ?
+	0x1f,SHIFT,      // @
+	0x04,SHIFT,      // A
+	0x05,SHIFT,      // B
+	0x06,SHIFT,      // C
+	0x07,SHIFT,      // D
+	0x08,SHIFT,      // E
+	0x09,SHIFT,      // F
+	0x0a,SHIFT,      // G
+	0x0b,SHIFT,      // H
+	0x0c,SHIFT,      // I
+	0x0d,SHIFT,      // J
+	0x0e,SHIFT,      // K
+	0x0f,SHIFT,      // L
+	0x10,SHIFT,      // M
+	0x11,SHIFT,      // N
+	0x12,SHIFT,      // O
+	0x13,SHIFT,      // P
+	0x14,SHIFT,      // Q
+	0x15,SHIFT,      // R
+	0x16,SHIFT,      // S
+	0x17,SHIFT,      // T
+	0x18,SHIFT,      // U
+	0x19,SHIFT,      // V
+	0x1a,SHIFT,      // W
+	0x1b,SHIFT,      // X
+	0x1c,SHIFT,      // Y
+	0x1d,SHIFT,      // Z
+	0x2f,NOMOD,          // [
+	0x31,NOMOD,          // bslash
+	0x30,NOMOD,          // ]
+	0x23,SHIFT,    // ^
+	0x2d,SHIFT,    // _
+	0x35,NOMOD,          // `
+	0x04,NOMOD,          // a
+	0x05,NOMOD,          // b
+	0x06,NOMOD,          // c
+	0x07,NOMOD,          // d
+	0x08,NOMOD,          // e
+	0x09,NOMOD,          // f
+	0x0a,NOMOD,          // g
+	0x0b,NOMOD,          // h
+	0x0c,NOMOD,          // i
+	0x0d,NOMOD,          // j
+	0x0e,NOMOD,         // k
+	0x0f,NOMOD,          // l
+	0x10,NOMOD,          // m
+	0x11,NOMOD,          // n
+	0x12,NOMOD,          // o
+	0x13,NOMOD,          // p
+	0x14,NOMOD,          // q
+	0x15,NOMOD,          // r
+	0x16,NOMOD,          // s
+	0x17,NOMOD,          // t
+	0x18,NOMOD,          // u
+	0x19,NOMOD,          // v
+	0x1a,NOMOD,          // w
+	0x1b,NOMOD,          // x
+	0x1c,NOMOD,          // y
+	0x1d,NOMOD,          // z
+	0x2f,SHIFT,    // 
+	0x31,SHIFT,    // |
+	0x30,SHIFT,    // }
+	0x35,SHIFT,    // ~
+	0,NOMOD				// DEL
+};
+
diff -rupN arduino-1.0.5/libraries/Wire/Wire.h arduino-dst/libraries/Wire/Wire.h
--- arduino-1.0.5/libraries/Wire/Wire.h	2013-05-17 20:22:16.000000000 +0200
+++ arduino-dst/libraries/Wire/Wire.h	2014-03-16 02:19:17.163233000 +0100
@@ -25,7 +25,8 @@
 #include <inttypes.h>
 #include "Stream.h"
 
-#define BUFFER_LENGTH 32
+#define BUFFER_LENGTH 34
+
 
 class TwoWire : public Stream
 {
diff -rupN arduino-1.0.5/libraries/Wire/utility/twi.h arduino-dst/libraries/Wire/utility/twi.h
--- arduino-1.0.5/libraries/Wire/utility/twi.h	2013-05-17 20:22:16.000000000 +0200
+++ arduino-dst/libraries/Wire/utility/twi.h	2014-03-16 02:18:19.697545000 +0100
@@ -26,11 +26,12 @@
 
   #ifndef TWI_FREQ
   #define TWI_FREQ 100000L
+//  #define TWI_FREQ 400000L
   #endif
 
-  #ifndef TWI_BUFFER_LENGTH
-  #define TWI_BUFFER_LENGTH 32
-  #endif
+
+  #define TWI_BUFFER_LENGTH 34
+
 
   #define TWI_READY 0
   #define TWI_MRX   1
